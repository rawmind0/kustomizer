version: 2
project_name: kustomizer
changelog:
  use: github-native
builds:
  - <<: &build_defaults
      binary: kustomizer
      main: ./cmd/kustomizer
      ldflags:
        - -s -w -X main.VERSION={{ .Version }}
      env:
        - CGO_ENABLED=0
    id: linux
    goos:
      - linux
    goarch:
      - amd64
      - arm64
  - <<: *build_defaults
    id: darwin
    goos:
      - darwin
    goarch:
      - amd64
      - arm64
  - <<: *build_defaults
    id: windows
    goos:
      - windows
    goarch:
      - amd64
archives:
  - name_template: "{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    id: nix
    builds: [darwin, linux]
    format: tar.gz
    files:
      - LICENSE
  - name_template: "{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    id: windows
    builds: [windows]
    format: zip
    files:
      - LICENSE
source:
  enabled: true
  name_template: '{{ .ProjectName }}_{{ .Version }}_source_code'
sboms:
  - id: source
    artifacts: source
    documents:
      - "{{ .ProjectName }}_{{ .Version }}_sbom.spdx.json"
signs:
  - cmd: cosign
    stdin: '{{ .Env.COSIGN_PASSWORD }}'
    args:
      - sign-blob
      - '--key=/tmp/cosign.key'
      - '--output-signature=${signature}'
      - '${artifact}'
    artifacts: checksum
brews:
  - name: kustomizer
    repository:
      owner: stefanprodan
      name: homebrew-tap
      branch: master
      token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"
    directory: Formula
    homepage: "https://kustomizer.dev/"
    description: "Kustomizer CLI"
    dependencies:
      - name: cosign
      - name: diffutils
        type: optional
    install: |
      bin.install "kustomizer"
      bash_output = Utils.safe_popen_read(bin/"kustomizer", "completion", "bash")
      (bash_completion/"kustomizer").write bash_output
      zsh_output = Utils.safe_popen_read(bin/"kustomizer", "completion", "zsh")
      (zsh_completion/"_kustomizer").write zsh_output
      fish_output = Utils.safe_popen_read(bin/"kustomizer", "completion", "fish")
      (fish_completion/"kustomizer.fish").write fish_output
    test: |
      system "#{bin}/kustomizer --version"
before:
  hooks:
    - make dockerfile
dockers:
  - image_templates:
      - 'ghcr.io/stefanprodan/{{ .ProjectName }}:{{ .Tag }}-amd64'
    dockerfile: Dockerfile.distroless
    use: buildx
    goos: linux
    goarch: amd64
    build_flag_templates:
      - "--pull"
      - "--build-arg=ARCH=linux/amd64"
      - "--label=org.opencontainers.image.created={{ .Date }}"
      - "--label=org.opencontainers.image.name={{ .ProjectName }}"
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      - "--label=org.opencontainers.image.version={{ .Version }}"
      - "--label=org.opencontainers.image.source={{ .GitURL }}"
      - "--platform=linux/amd64"
  - image_templates:
      - 'ghcr.io/stefanprodan/{{ .ProjectName }}:{{ .Tag }}-arm64'
    dockerfile: Dockerfile.distroless
    use: buildx
    goos: linux
    goarch: arm64
    build_flag_templates:
      - "--pull"
      - "--build-arg=ARCH=linux/arm64"
      - "--label=org.opencontainers.image.created={{ .Date }}"
      - "--label=org.opencontainers.image.name={{ .ProjectName }}"
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      - "--label=org.opencontainers.image.version={{ .Version }}"
      - "--label=org.opencontainers.image.source={{ .GitURL }}"
      - "--platform=linux/arm64"
docker_manifests:
  - name_template: 'ghcr.io/stefanprodan/{{ .ProjectName }}:{{ .Tag }}'
    image_templates:
      - 'ghcr.io/stefanprodan/{{ .ProjectName }}:{{ .Tag }}-amd64'
      - 'ghcr.io/stefanprodan/{{ .ProjectName }}:{{ .Tag }}-arm64'
  - name_template: 'ghcr.io/stefanprodan/{{ .ProjectName }}:latest'
    image_templates:
      - 'ghcr.io/stefanprodan/{{ .ProjectName }}:{{ .Tag }}-amd64'
      - 'ghcr.io/stefanprodan/{{ .ProjectName }}:{{ .Tag }}-arm64'
docker_signs:
  - cmd: cosign
    stdin: '{{ .Env.COSIGN_PASSWORD }}'
    args: ["sign", "--key=/tmp/cosign.key", "${artifact}"]
    artifacts: all
